1. 如果导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！”。

2. Go的函数形式：
  func functionName(parameter_list) (return_value_list) {
     …
  }
其中：
  parameter_list 的形式为 (param1 type1, param2 type2, …)
  return_value_list 的形式为 (ret1 type1, ret2 type2, …)
例如：
  func Sum(a, b int) int { return a + b }
  
3. Go的注释：单行注释使用//    多行注释使用/*和*/

4. 在Go中，一个函数可以有多个返回值，返回类型之间用逗号隔开，并用小括号()将其括起来，如：
  func FunctionName (a typea, b typeb) (t1 type1. t2 type2)
例如：
  func Atoi(s string) (i int, err error)
  （常用于判断某个函数是否执行成功或返回错误消息）
  
5. Go使用type关键字定义自己的类型或定义一个已经存在的类型的别名，例如：
  type IZ int 或者
  type (
    IZ int
    FZ float64
    STR string
  )
  
6. Go的类型转换必须显式说明，例如：
  a := 5.0
  b := int(a)
  
7. Go的常量使用const关键字定义，如：
  const identifier [type] = value
其中，[type]可以被省略，因为编译器可以根据变量的值来推断其类型。例如：
  const Pi = 3.14159
此外，常量可以使用并行赋值的形式，例如：
  const a, b, c = "eat", 2, "veg"
  
8. Go的数字型常量没有大小和符号，可以使用任何精度而不会导致溢出

9. 在Go中，反斜杠\可以在常量表达式中作为多行的连接符使用，例如：
  const Ln2 = 0.693147180559945309417232121458\
			176568075500134360255254120680009

10. Go使用var声明变量，如：
  var identifier type
  
11. 为什么Go语言在声明变量的时候将变量的类型放在变量的名称之后？
  首先，它是为了避免像 C 语言中那样含糊不清的声明形式。
  例如：int* a, b;在这个例子中，只有 a 是指针而 b 不是。如果你想要这两个变量都是指针，则需要将它们分开书写。而在Go中可以将它们轻松地定义为指针：var a,b *int
  其次，这种语法能够按照从左至右的顺序阅读，使得代码更加容易理解。
  
12. 在一个变量被声明之后，系统会自动赋予它该类型的零值。int为0， float32(64)为0.0， bool为false， string为空字符串， 指针为nil。

13. 
