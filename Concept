1. 如果导入了一个包却没有使用它，则会在构建程序时引发错误，如 imported and not used: os，这正是遵循了 Go 的格言：“没有不必要的代码！”。

2. Go的函数形式：
  func functionName(parameter_list) (return_value_list) {
     …
  }
其中：
  parameter_list 的形式为 (param1 type1, param2 type2, …)
  return_value_list 的形式为 (ret1 type1, ret2 type2, …)
例如：
  func Sum(a, b int) int { return a + b }
  
3. Go的注释：单行注释使用//    多行注释使用/*和*/

4. 在Go中，一个函数可以有多个返回值，返回类型之间用逗号隔开，并用小括号()将其括起来，如：
  func FunctionName (a typea, b typeb) (t1 type1. t2 type2)
例如：
  func Atoi(s string) (i int, err error)
  （常用于判断某个函数是否执行成功或返回错误消息）
  
5. Go使用type关键字定义自己的类型或定义一个已经存在的类型的别名，例如：
  type IZ int 或者
  type (
    IZ int
    FZ float64
    STR string
  )
  
6. Go的类型转换必须显式说明，例如：
  a := 5.0
  b := int(a)
  
7. Go的常量使用const关键字定义，如：
  const identifier [type] = value
其中，[type]可以被省略，因为编译器可以根据变量的值来推断其类型。例如：
  const Pi = 3.14159
此外，常量可以使用并行赋值的形式，例如：
  const a, b, c = "eat", 2, "veg"
  
8. Go的数字型常量没有大小和符号，可以使用任何精度而不会导致溢出

9. 在Go中，反斜杠\可以在常量表达式中作为多行的连接符使用，例如：
  const Ln2 = 0.693147180559945309417232121458\
			176568075500134360255254120680009

10. Go使用var声明变量，如：
  var identifier type
  
11. 问题：为什么Go语言在声明变量的时候将变量的类型放在变量的名称之后？
  首先，它是为了避免像 C 语言中那样含糊不清的声明形式。
  例如：int* a, b;在这个例子中，只有 a 是指针而 b 不是。如果你想要这两个变量都是指针，则需要将它们分开书写。而在Go中可以将它们轻松地定义为指针：var a,b *int
  其次，这种语法能够按照从左至右的顺序阅读，使得代码更加容易理解。
  
12. 在一个变量被声明之后，系统会自动赋予它该类型的零值。int为0， float32(64)为0.0， bool为false， string为空字符串， 指针为nil。

13. Go可以使用操作符 := 来高效地创建一个新的变量，例如：
  a := 50 或 b := false
但是这种声明方式只能在函数体内使用，不可以用于全局变量的声明与赋值

14. 在Go中交换两个变量的值可以简单使用 a, b = b, a
							
15. 变量也可以在init()函数中初始化。这是一类非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级比 main() 函数高。
每个源文件可以包含多个 init() 函数，同一个源文件中的 init() 函数会按照从上到下的顺序执行，如果一个包有多个源文件包含 init() 函数的话，则官方鼓励但不保证以文件名的顺序调用。初始化总是以单线程并且按照包的依赖关系顺序执行。

16. 在Go语言中，&&和||分别代表“与”和“或”，他们具有快捷性质，即当运算符左边表达式的值已经能够决定整个表达式的值的时候，运算符右边的表达式将不会被执行。因此，如果有多个条件判断，应当将计算过程较为复杂的表达式放在运算符的右侧以减少不必要的运算。

17. 对于Go的bool类型，用%t进行格式化输出。在命名bool类型的变量时采用is开头来优化代码的阅读体验，例如：isSorted/isFinished

18. 在Go中通过增加前缀0来表示8进制数（如：077），增加前缀0x来表示16进制数（如：0xFF）, 用e来表示10的连乘（如：1e3=1000）

19. 在Go的格式化字符中，%d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0nd 用于规定输出长度为 n 的整数，其中开头的数字 0 是必须的。
    %n.mg 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f

20. 问题：在Go中，int类型和int64类型是相同的类型吗？
  不是。int类型可能是32位或者64位的，这取决于操作系统的类型。在64位操作系统上int和int64是相同的类型。
  
21. Go具有以下复数类型：complex64(32位实数和虚数), complex128(64位实数和虚数)。复数使用re+imI来表示，其中re是实数，im是虚数，I是根号-1.例如：
  var c complex64 = 5 + 10i
  fmt.Printf("The value is: %v", c1)

  如果re和im都是float32类型，complex64的复数c可以用以下方式表示：
    c = complex(re,im)
  函数 real(c) 和 imag(c) 可以分别获得相应的实数和虚数部分。
    
22. 使用位左移与 iota 计数配合可优雅地实现存储单位的常量枚举：
  type ByteSize float64
  const (
	  _ = iota // 通过赋值给空白标识符来忽略值
	  KB ByteSize = 1<<(10*iota)
	  MB
  	  GB
	  TB
	  PB
	  EB
	  ZB
	  YB
  )

23. Go的运算符优先级：
 优先级 	     运算符
 7 		^ !
 6 		* / % << >> & &^
 5 		+ - | ^
 4 		== != < <= >= >
 3 		<-
 2 		&&
 1 		||

24. Go中，strings.Count()用于计算字符串str中字符串s出现的 非重叠 次数。注意非重叠

25. 在Go的条件判断语句中，关键字 if 和 else 之后的左大括号 { 必须和关键字在同一行，
    如果使用了 else-if 结构，则前段代码块的右大括号 } 必须和 else-if 关键字在同一行。这两条规则都是被编译器强制规定的。


